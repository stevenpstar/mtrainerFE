{"version":3,"sources":["../src/Sinth.ts","../src/main.ts"],"sourcesContent":["import { Note } from \"./main\";\n\nconst lookAhead = 25.0;\nconst scheduleAheadTime = 0.1;\nlet notesInQueue: Note[] = [];\nlet noteIndex = 0;\nlet timerID: any;\n\nfunction InitPlay(notes: Note[]) {\n  notesInQueue = notes;\n  noteIndex = 0;\n}\n\nlet play: boolean = false;\n\nfunction PlayFull(\n  aContext: AudioContext,\n  startTime: number,\n  sound: AudioBuffer,\n  tempo: number,\n  volume: number,\n  notes: Note[],\n  notifyStop: () => void,\n): void {\n  const spb = 60.0 / tempo;\n  let nIndex = 0;\n  notes.forEach((n: Note, i: number) =>\n    scheduleNote(\n      aContext,\n      startTime + (notes[i].Beat - 1) * spb,\n      sound,\n      n,\n      spb,\n      volume,\n    ),\n  );\n  notifyStop();\n}\n\nfunction PlaySequence(\n  aContext: AudioContext,\n  startTime: number,\n  sound: AudioBuffer,\n  tempo: number,\n  volume: number,\n  notifyStop: () => void,\n): void {\n  const secondsPerBeat = 60.0 / tempo;\n  play = true;\n\n  const nextBeat =\n    startTime + (notesInQueue[noteIndex].Beat - 1) * secondsPerBeat;\n  if (aContext.currentTime + scheduleAheadTime >= nextBeat) {\n    scheduleNote(\n      aContext,\n      nextBeat,\n      sound,\n      notesInQueue[noteIndex],\n      secondsPerBeat,\n      volume,\n    );\n    noteIndex++;\n    if (noteIndex >= notesInQueue.length) {\n      StopSequence();\n      notifyStop();\n    }\n  }\n\n  if (play) {\n    timerID = setTimeout(\n      () => PlaySequence(aContext, startTime, sound, tempo, volume, notifyStop),\n      lookAhead,\n    );\n  }\n}\n\nfunction StopSequence(): void {\n  clearTimeout(timerID);\n  noteIndex = 0;\n  play = false;\n}\n\nfunction scheduleNote(\n  aContext: AudioContext,\n  time: number,\n  sound: AudioBuffer,\n  note: Note,\n  secondsPerBeat: number,\n  volume: number,\n): void {\n  // MAX VOLUME = 0.25\n  // MIN VOLUME = 0.0\n  const perc = volume / 100;\n  const MAX_VOLUME = 0.25;\n  const v = MAX_VOLUME * perc;\n  const source = aContext.createBufferSource();\n  const gainNode = aContext.createGain();\n  gainNode.gain.setValueAtTime(v, time);\n  source.buffer = sound;\n  source.playbackRate.value = GetPlaybackRate(69, note.MidiNote);\n  source.connect(gainNode).connect(aContext.destination);\n  source.start(time);\n  gainNode.gain.linearRampToValueAtTime(\n    0,\n    time + note.Duration * secondsPerBeat,\n  );\n}\n\nfunction GetPlaybackRate(sampleNote: number = 69, desiredNote: number): number {\n  return 2 ** ((desiredNote - sampleNote) / 12);\n}\n\nfunction PlayMetronome(\n  aContext: AudioContext,\n  startTime: number,\n  count: number,\n  tempo: number,\n): void {\n  const bps = 60 / tempo;\n\n  for (let i = 0; i < count; i++) {\n    const timeStart = startTime + bps * i;\n    const timeStop = startTime + bps * i + 0.2;\n    const osc = aContext.createOscillator();\n    const env = aContext.createGain();\n    osc.frequency.value = i === 0 ? 600 : 500;\n    env.gain.setValueAtTime(0.5, timeStart);\n    osc.connect(env).connect(aContext.destination);\n    osc.start(timeStart);\n    osc.stop(timeStop);\n  }\n}\n\nexport { PlaySequence, StopSequence, InitPlay, Note, PlayFull, PlayMetronome };\n","// main file for SinthV2\nimport {\n  InitPlay,\n  PlayFull,\n  PlayMetronome,\n  PlaySequence,\n  StopSequence,\n} from \"./Sinth.js\";\n\nexport module Sinth {\n  export function CreateSinth(): void {}\n\n  export function play(\n    aContext: AudioContext,\n    sound: AudioBuffer,\n    tempo: number,\n    volume: number,\n    callback: () => void,\n  ): void {\n    PlaySequence(\n      aContext,\n      aContext.currentTime,\n      sound,\n      tempo,\n      volume,\n      callback,\n    );\n  }\n\n  export function playFull(\n    aContext: AudioContext,\n    sound: AudioBuffer,\n    tempo: number,\n    volume: number,\n    notes: Note[],\n    callback: () => void,\n  ): void {\n    PlayFull(\n      aContext,\n      aContext.currentTime,\n      sound,\n      tempo,\n      volume,\n      notes,\n      callback,\n    );\n  }\n\n  export function playMetronome(\n    aContext: AudioContext,\n    count: number,\n    tempo: number,\n  ): void {\n    PlayMetronome(aContext, aContext.currentTime, count, tempo);\n  }\n\n  export function stop(): void {\n    StopSequence();\n  }\n\n  export function initplay(notes: Note[]): void {\n    InitPlay(notes);\n  }\n}\n\nexport interface Note {\n  Beat: number;\n  Duration: number;\n  MidiNote: number;\n}\n"],"mappings":"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","names":["lookAhead","scheduleAheadTime","notesInQueue","noteIndex","timerID","InitPlay","notes","play","PlayFull","aContext","startTime","sound","tempo","volume","notifyStop","spb","nIndex","n","i","scheduleNote","PlaySequence","secondsPerBeat","nextBeat","StopSequence","time","note","v","source","gainNode","GetPlaybackRate","sampleNote","desiredNote","__pow","PlayMetronome","count","bps","timeStart","timeStop","osc","env","Sinth","CreateSinth","play","aContext","sound","tempo","volume","callback","PlaySequence","playFull","notes","PlayFull","playMetronome","count","PlayMetronome","stop","StopSequence","initplay","InitPlay"]}