{"version":3,"sources":["../src/Sinth.ts","../src/main.ts"],"sourcesContent":["import { Note } from \"./main\";\n\nconst lookAhead = 25.0;\nconst scheduleAheadTime = 0.1;\nlet notesInQueue: Note[] = [];\nlet noteIndex = 0;\nlet timerID: any;\n\nfunction InitPlay(notes: Note[]) {\n  notesInQueue = notes;\n  noteIndex = 0;\n}\n\nlet play: boolean = false;\n\nfunction PlayFull(\n  aContext: AudioContext,\n  sound: AudioBuffer,\n  tempo: number,\n  notes: Note[],\n  notifyStop: () => void): void {\n    const spb = 60.0 / tempo;\n    let nIndex = 0;\n    notes.forEach((n: Note, i: number) => \n                  scheduleNote(aContext, \n                   (notes[i].Beat - 1) * spb,\n                   sound,\n                   n,\n                   spb));\n    notifyStop();\n  }\n\nfunction PlaySequence(\n  aContext: AudioContext,\n  sound: AudioBuffer,\n  tempo: number,\n  notifyStop: () => void): void {\n    const secondsPerBeat = 60.0 / tempo;\n    play = true;\n\n    const nextBeat = (notesInQueue[noteIndex].Beat - 1) * secondsPerBeat;\n    if (aContext.currentTime + scheduleAheadTime >= nextBeat) {\n      scheduleNote(aContext, nextBeat, sound, notesInQueue[noteIndex], secondsPerBeat);\n      noteIndex++;\n      if (noteIndex >= notesInQueue.length) {\n        StopSequence();\n        notifyStop();\n      }\n    }\n\n    if (play) {\n      timerID = setTimeout(() => PlaySequence(aContext, sound, tempo, notifyStop), lookAhead);\n    }\n}\n\nfunction StopSequence(): void {\n  clearTimeout(timerID);\n  noteIndex = 0;\n  play = false;\n}\n\nfunction scheduleNote(aContext: AudioContext, \n                      time: number, \n                      sound: AudioBuffer,\n                      note: Note,\n                      secondsPerBeat: number): void {\n  const source = aContext.createBufferSource();\n  const gainNode = aContext.createGain();\n  gainNode.gain.setValueAtTime(0.25, time);\n  source.buffer = sound;\n  source.playbackRate.value = GetPlaybackRate(69, note.MidiNote);\n  source.connect(gainNode).connect(aContext.destination);\n  source.start(time);\n  gainNode.gain.linearRampToValueAtTime(0, time + (note.Duration * secondsPerBeat));\n}\n\nfunction GetPlaybackRate(sampleNote: number = 69, desiredNote: number): number {\n  return 2 ** ((desiredNote - sampleNote) / 12);\n}\n\nfunction PlayMetronome(aContext: AudioContext,\n                       count: number,\n                       tempo: number): void {\n  const bps = 60 / tempo;\n\n  for (let i=0;i<count;i++) {\n    const timeStart = bps * i;\n    const timeStop = (bps * i) + 0.2;\n    const osc = aContext.createOscillator();\n    const env = aContext.createGain();\n    osc.frequency.value = (i === 0 ? 600 : 500);\n    env.gain.setValueAtTime(0.5, timeStart);\n    osc.connect(env).connect(aContext.destination);\n    osc.start(timeStart);\n    osc.stop(timeStop)\n  }\n}\n\nexport { PlaySequence, StopSequence, InitPlay, Note, PlayFull, PlayMetronome };\n\n\n","// main file for SinthV2\nimport { InitPlay, PlayFull, PlayMetronome, PlaySequence, StopSequence } from \"./Sinth.js\";\n\nexport module Sinth {\n  export function CreateSinth(): void {}\n\n  export function play(sound: AudioBuffer, tempo: number, callback: () => void): void {\n    const newContext = new AudioContext();\n    PlaySequence(newContext, sound, tempo, callback);\n  }\n\n  export function playFull(sound: AudioBuffer, tempo: number, notes: Note[], callback: () => void): void {\n    const newContext = new AudioContext();\n    PlayFull(newContext, sound, tempo, notes, callback);\n  }\n\n  export function playMetronome(count: number, tempo: number): void {\n    const newContext = new AudioContext();\n    PlayMetronome(newContext, count, tempo);\n  }\n\n  export function stop(): void {\n    StopSequence();\n  }\n\n  export function initplay(notes: Note[]): void {\n    InitPlay(notes);\n  }\n}\n\nexport interface Note {\n  Beat: number;\n  Duration: number;\n  MidiNote: number;\n}\n\n"],"mappings":"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","names":["lookAhead","scheduleAheadTime","notesInQueue","noteIndex","timerID","InitPlay","notes","play","PlayFull","aContext","sound","tempo","notifyStop","spb","nIndex","n","i","scheduleNote","PlaySequence","secondsPerBeat","nextBeat","StopSequence","time","note","source","gainNode","GetPlaybackRate","sampleNote","desiredNote","__pow","PlayMetronome","count","bps","timeStart","timeStop","osc","env","Sinth","CreateSinth","play","sound","tempo","callback","newContext","PlaySequence","playFull","notes","PlayFull","playMetronome","count","PlayMetronome","stop","StopSequence","initplay","InitPlay"]}