{"version":3,"sources":["../src/Sinth.ts","../src/main.ts"],"sourcesContent":["import { Note } from \"./main\";\n\nconst lookAhead = 25.0;\nconst scheduleAheadTime = 0.1;\nlet notesInQueue: Note[] = [];\nlet noteIndex = 0;\nlet timerID: any;\n\nfunction InitPlay(notes: Note[]) {\n  notesInQueue = notes;\n  noteIndex = 0;\n}\n\nlet play: boolean = false;\n\nfunction PlayFull(\n  aContext: AudioContext,\n  startTime: number,\n  sound: AudioBuffer,\n  tempo: number,\n  notes: Note[],\n  notifyStop: () => void): void {\n    const spb = 60.0 / tempo;\n    let nIndex = 0;\n    notes.forEach((n: Note, i: number) => \n                  scheduleNote(aContext, \n                   startTime + (notes[i].Beat - 1) * spb,\n                   sound,\n                   n,\n                   spb));\n    notifyStop();\n  }\n\nfunction PlaySequence(\n  aContext: AudioContext,\n  startTime: number,\n  sound: AudioBuffer,\n  tempo: number,\n  notifyStop: () => void): void {\n    const secondsPerBeat = 60.0 / tempo;\n    play = true;\n\n    const nextBeat = startTime + (notesInQueue[noteIndex].Beat - 1) * secondsPerBeat;\n    if (aContext.currentTime + scheduleAheadTime >= nextBeat) {\n      scheduleNote(aContext, nextBeat, sound, notesInQueue[noteIndex], secondsPerBeat);\n      noteIndex++;\n      if (noteIndex >= notesInQueue.length) {\n        StopSequence();\n        notifyStop();\n      }\n    }\n\n    if (play) {\n      timerID = setTimeout(() => PlaySequence(aContext, startTime, sound, tempo, notifyStop), lookAhead);\n    }\n}\n\nfunction StopSequence(): void {\n  clearTimeout(timerID);\n  noteIndex = 0;\n  play = false;\n}\n\nfunction scheduleNote(aContext: AudioContext, \n                      time: number, \n                      sound: AudioBuffer,\n                      note: Note,\n                      secondsPerBeat: number): void {\n  const source = aContext.createBufferSource();\n  const gainNode = aContext.createGain();\n  gainNode.gain.setValueAtTime(0.25, time);\n  source.buffer = sound;\n  source.playbackRate.value = GetPlaybackRate(69, note.MidiNote);\n  source.connect(gainNode).connect(aContext.destination);\n  source.start(time);\n  gainNode.gain.linearRampToValueAtTime(0, time + (note.Duration * secondsPerBeat));\n}\n\nfunction GetPlaybackRate(sampleNote: number = 69, desiredNote: number): number {\n  return 2 ** ((desiredNote - sampleNote) / 12);\n}\n\nfunction PlayMetronome(aContext: AudioContext,\n                       startTime: number,\n                       count: number,\n                       tempo: number): void {\n  const bps = 60 / tempo;\n\n  for (let i=0;i<count;i++) {\n    const timeStart = startTime + bps * i;\n    const timeStop = startTime + (bps * i) + 0.2;\n    const osc = aContext.createOscillator();\n    const env = aContext.createGain();\n    osc.frequency.value = (i === 0 ? 600 : 500);\n    env.gain.setValueAtTime(0.5, timeStart);\n    osc.connect(env).connect(aContext.destination);\n    osc.start(timeStart);\n    osc.stop(timeStop)\n  }\n}\n\nexport { PlaySequence, StopSequence, InitPlay, Note, PlayFull, PlayMetronome };\n\n\n","// main file for SinthV2\nimport { InitPlay, PlayFull, PlayMetronome, PlaySequence, StopSequence } from \"./Sinth.js\";\n\nexport module Sinth {\n  export function CreateSinth(): void {}\n\n  export function play(aContext: AudioContext, sound: AudioBuffer, tempo: number, callback: () => void): void {\n    PlaySequence(aContext, aContext.currentTime, sound, tempo, callback);\n  }\n\n  export function playFull(aContext: AudioContext, sound: AudioBuffer, tempo: number, notes: Note[], callback: () => void): void {\n    PlayFull(aContext, aContext.currentTime, sound, tempo, notes, callback);\n  }\n\n  export function playMetronome(aContext: AudioContext, count: number, tempo: number): void {\n    PlayMetronome(aContext, aContext.currentTime, count, tempo);\n  }\n\n  export function stop(): void {\n    StopSequence();\n  }\n\n  export function initplay(notes: Note[]): void {\n    InitPlay(notes);\n  }\n}\n\nexport interface Note {\n  Beat: number;\n  Duration: number;\n  MidiNote: number;\n}\n\n"],"mappings":"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","names":["lookAhead","scheduleAheadTime","notesInQueue","noteIndex","timerID","InitPlay","notes","play","PlayFull","aContext","startTime","sound","tempo","notifyStop","spb","nIndex","n","i","scheduleNote","PlaySequence","secondsPerBeat","nextBeat","StopSequence","time","note","source","gainNode","GetPlaybackRate","sampleNote","desiredNote","__pow","PlayMetronome","count","bps","timeStart","timeStop","osc","env","Sinth","CreateSinth","play","aContext","sound","tempo","callback","PlaySequence","playFull","notes","PlayFull","playMetronome","count","PlayMetronome","stop","StopSequence","initplay","InitPlay"]}